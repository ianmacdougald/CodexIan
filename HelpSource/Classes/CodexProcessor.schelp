TITLE::CodexProcessor
summary::Manager for loading and unloading of SynthDefs from a server
categories::Libraries>Codices
related::Classes/Codex, Classes/CodexModules
keyword::codexian, utilities, synthdef, processor, codexian utlities

DESCRIPTION::
CodexProcessor is responsible for loading and unloading SynthDef objects from a given server.

CLASSMETHODS::
method::new
Creates a new instance of CodexProcessor

INSTANCEMETHODS::
private::initProcessor

method::send
Sends a SynthDef or collection of SynthDef objects to an arbitrary server.

method::add
link::Classes/SynthDef#-add#Adds:: a SynthDef or a collection of SynthDef objects.

method::remove
Remove a SynthDef or a collection of SynthDef objects from the server.

method::server
Gets and sets the server.

EXAMPLES::
code::
(
//1. Instance a CodexProcessor.
Server.default = s = Server.local;
s.waitForBoot({ p = CodexProcessor.new(s) });
)

(
//2. Define a SynthDef.
d = SynthDef(\someSynthDef, {
	Out.ar(\out.kr(0), SinOsc.ar(\freq.kr(400)));
});
)

//3. Add it.
p.add(d);

//4. Test it.
x = Synth(\someSynthDef);
x.set(\freq, 800);
x.free;

//5. Remove it.
p.remove(d);

//6. Test it.
x = Synth(\someSynthDef);
::

CodexProcessorr can also accept collections of SynthDef objects to process all at once.
code::
(
//1. Instance a CodexProcessor.
Server.default = s = Server.local;
s.waitForBoot({ p = CodexProcessor.new(s) });
)

(
//2. Define a collection of SynthDef objects.
d = Array.fill(16, { |i|
	var name = format("TestSynth%", i).asSymbol;
	SynthDef(name, {
		var env = EnvGen.ar(
			Env.perc,
			timeScale: \timescale.kr(1),
			doneAction: Done.freeSelf
		);
		var sig = SinOsc.ar(\freq.kr(400));
		sig = sig * env * \ampDB.kr(-12).dbamp;
		Out.ar(\out.kr(0), sig ! 2);
	});
});
)

//3. Add them.
p.add(d);

(
//4. Test them.
Pbind(
	\instrument, p {
		16.do { | i |
			var name = format("TestSynth%", i);
			format("% is playing", name).postln;
			name.yield;
		}
	},
	\degree, Pxrand([0, 2, 3, 4, 5, 7], inf),
	\dur, 0.2,
	\timescale, Pkey(\dur) * 2
).play
)

//5. Remove them.
p.remove(d);

//6. Test them again (run above code).
::
