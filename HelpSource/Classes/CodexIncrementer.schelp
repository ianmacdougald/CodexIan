TITLE:: CodexIncrementer
summary::Generator of incrementally unique filenames
categories::Libraries>Codices
related::Classes/CodexTemplater, Overviews/Codices
keyword:: codexian utilities, codexian, utilities, file, increment, codexian path

DESCRIPTION::
CodexIncrementer creates incrementally unique filenames stored in a specified folder.

CLASSMETHODS::
method::new
argument::fileTemplate
A string representing the filename that this class should increment
argument::folder
A string representing the path to the folder where the class will look for increments of the file template.

INSTANCEMETHODS::
method::increment
Increment the filename and return it.

method::currentIncrement
Gets the current increment value (i.e. the last one that was used to format a file).

method::reset
Resets the increment value, forcing the class to check the folder changes.

method::extension
Gets and sets the extension that is added to the end of the file.

method::fileTemplate
Gets and sets the template from which filenames are incremented.

method::folder
Gets and sets the folder where the instance looks for created filenames to increment.

private::decrement
private::nextFileName
private::formatFileName
EXAMPLES::
code::
(
f = CodexIncrementer.new(
	"some-file.wav",
	"~/Desktop".standardizePath
);
f.increment.postln;
)

//The incrementer remains constant until a new file is made.
f.increment.postln;

(
//But once that new file is made...
s.waitForBoot({
	fork{
		var synth;
		s.record(f.increment);
		s.sync;
		synth = {SinOsc.ar(440)}
		.play.onFree({s.stopRecording});
		0.1.wait;
		synth.free;
	};
});
)

//...the incrementer returns a new value.
f.increment.postln;

(
//If a path is added with a number at the end of it, incrementing starts from there.
f = CodexIncrementer.new(
	"some-other-file-256.wav",
	"~/Desktop".standardizePath
);
f.increment.postln;
)
::
